buildscript {
    ext  {
        mavenRepos = {
            mavenLocal()
            maven { url "https://plugins.gradle.org/m2/" }
            maven { url "https://repo.grails.org/grails/core" }
            mavenCentral()
        }
    }

    repositories mavenRepos
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
    }
}

version "2.0.1"
group "com.causecode.plugins"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"org.grails.grails-plugin"
apply plugin:"jacoco"
apply plugin: 'maven-publish'
apply plugin: 'maven'
apply plugin: 'signing'

repositories mavenRepos

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging:1.5.12.RELEASE"
    compile "org.springframework.boot:spring-boot-autoconfigure:1.5.12.RELEASE"
    compile "org.springframework.boot:spring-boot-starter-tomcat:1.5.12.RELEASE"

    compile "org.grails:grails-core:3.3.5"
    compile "org.grails:grails-logging:3.3.5"
    compile "org.grails:grails-plugin-services:3.3.5"
    compile "org.grails.plugins:quartz:2.0.13"
    compile "org.grails.plugins:async:3.3.2"

    console "org.grails:grails-console"

    provided "org.grails:grails-plugin-url-mappings:3.3.5"
    provided "org.grails:grails-plugin-domain-class:3.3.5"

    provided "org.grails.plugins:mongodb:6.1.5"
    provided "org.grails.plugins:embedded-mongodb:1.0.2"
    compile 'org.grails.plugins:converters:3.3.1'

    provided 'org.apache.commons:commons-io:1.3.2'

    profile "org.grails.profiles:plugin"

    // Test dependencies
    testCompile "org.grails:grails-test-mixins:3.3.0"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails:grails-plugin-testing:3.2.7"
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
        html.destination "${buildDir}/jacoco/jacocoHtml/"
        xml.destination "${buildDir}/jacoco/jacocoXml/jacoco.xml"
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [
                            '**/*UpdateEmbeddedInstancesJob.*/**',
                            '**/*Application.*/**'
                    ])
        })
    }
}

artifacts {
    archives jar

    archives javadocJar
    archives sourcesJar
}

signing {
    useGpgCmd()
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {

            if (!project.hasProperty('ossrhUsername') || !project.hasProperty('ossrhPassword')) {
                return
            }

            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'mongo-update-embedded'
                packaging 'jar'
                description 'This plugin is used to update embedded instances when parent class gets updated.'
                url 'https://github.com/causecode/mongo-update-embedded'

                scm {
                    url 'scm:svn:https://github.com/causecode/mongo-update-embedded'
                    connection 'scm:svn:https://github.com/causecode/mongo-update-embedded.git'
                    developerConnection 'https://github.com:causecode/mongo-update-embedded.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'causecode'
                        name 'CauseCode Technologies'
                        email 'bootstrap@causecode.com'
                    }
                }
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifactId "mongo-update-embedded"

            pom.withXml {
                def pomNode = asNode()
                // version-less dependencies are handled with dependencyManagement
                pomNode.dependencies.dependency.findAll {
                    it.version.text().isEmpty()
                }.each {
                    it.replaceNode {}
                }
            }
        }
    }
}

jar {
    exclude('test/**')
}

integrationTest {
    reports.html.enabled true
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}

